import { Agent } from '@openserv-labs/sdk';
import { z } from 'zod';
import dotenv from 'dotenv';
import { summarizeTokenTransactions } from './ETHWalletScanFunction.js';
import FormData from 'form-data';

// Load environment variables
dotenv.config();

const requiredEnvVars = ['OPENSERV_API_KEY_', 'ETHERSCAN_API_KEY', 'OPENAI_API_KEY'];
for (const envVar of requiredEnvVars) {
    if (!process.env[envVar]) {
        throw new Error(`${envVar} environment variable is required`);
    }
}

const agent = new Agent({
    systemPrompt: `You are an Ethereum wallet analysis agent specializing in token transaction analysis.
When asked to analyze a wallet or create a plan, follow these steps:
1. If no ETH address is provided, ask the user for one
2. Once address is provided, validate it's a proper ETH address (0x followed by 40 hex chars)
3. If valid, analyze the transactions
4. If invalid, explain the proper format and ask again

Always maintain context between messages and remember previously provided addresses.`
});

// Helper function to ensure proper taskIds format
function formatTaskIds(taskId) {
    if (!taskId) return null;  // Return null instead of undefined
    const id = Number(taskId);  // Ensure it's a number
    return id;  // Return single number instead of array
}

agent.addCapability({
    name: 'analyzeWallet',
    description: 'Analyze token transactions for an Ethereum wallet address',
    schema: z.object({
        address: z.string().describe('The Ethereum wallet address to analyze')
    }),
    async run({ args, action }, messages) {
        try {
            const isValidAddress = args.address.match(/^0x[a-fA-F0-9]{40}$/);

            if (!isValidAddress) {
                return `The address "${args.address}" is not a valid Ethereum address. Please provide an address in the format 0x followed by 40 hexadecimal characters.`;
            }

            const result = await summarizeTokenTransactions(args.address);
            
            if (result.chatGPTResponse) {
                // Save analysis as markdown if we have workspace context
                if (action?.workspace?.id) {
                    try {
                        const workspaceId = Number(action.workspace.id);
                        const fileName = `analysis/${args.address.toLowerCase()}.md`;
                        const markdownContent = `# Ethereum Wallet Analysis\n\n` +
                            `## Wallet Address\n\`${args.address}\`\n\n` +
                            `## Analysis Date\n${new Date().toISOString()}\n\n` +
                            `## Transaction Analysis\n${result.chatGPTResponse}\n\n` +
                            `## Transaction Details\n[View on Etherscan](${result.overviewURL})\n\n` +
                            `---\nGenerated by EthWalletAgent`;

                        // Get taskId as single number
                        const taskId = action.task?.id ? Number(action.task.id) : null;
                        
                        console.log('Attempting file upload:', {
                            workspaceId,
                            path: fileName,
                            hasTaskId: !!taskId,
                            taskId
                        });

                        const uploadResponse = await agent.uploadFile({
                            workspaceId,
                            path: fileName,
                            file: markdownContent,
                            taskIds: taskId,  // Pass single number or null
                            skipSummarizer: false
                        });

                        console.log('File upload response:', uploadResponse);

                        if (action.task?.id) {
                            await agent.addLogToTask({
                                workspaceId,
                                taskId: action.task.id,
                                severity: 'info',
                                type: 'text',
                                body: `✅ Analysis saved as: ${fileName}`
                            });
                        }
                    } catch (error) {
                        console.error('File upload error:', {
                            error: error.message,
                            response: error.response?.data,
                            status: error.response?.status
                        });
                        
                        if (action.task?.id) {
                            await agent.addLogToTask({
                                workspaceId: action.workspace.id,
                                taskId: action.task.id,
                                severity: 'error',
                                type: 'text',
                                body: `❌ Failed to save analysis: ${error.message}`
                            });
                        }
                    }
                }

                return `Analysis complete!\n\n${result.chatGPTResponse}\n\nFor a detailed view, check: ${result.overviewURL}`;
            } else {
                return 'No recent token transactions found for this address.';
            }
        } catch (error) {
            if (error.message.includes('ETHERSCAN_API_KEY')) {
                return 'Internal configuration error. Please contact support.';
            }
            return `Error analyzing wallet: ${error.message}`;
        }
    }
});

// Handle chat responses
agent.respondToChat = async function(action) {
    const lastMessage = action.messages[action.messages.length - 1].message.toLowerCase();
    
    // Check if the message contains an ETH address
    const addressMatch = lastMessage.match(/0x[a-fA-F0-9]{40}/i);
    
    if (addressMatch) {
        // If we found an ETH address, analyze it
        await this.handleToolRoute({
            params: { toolName: 'analyzeWallet' },
            body: { 
                args: { address: addressMatch[0] },
                action,
                messages: action.messages
            }
        });
    } else if (lastMessage.includes('plan') || lastMessage.includes('analyze')) {
        // If it's a planning request without an address
        await this.sendChatMessage({
            workspaceId: action.workspace.id,
            agentId: action.me.id,
            message: "I'll help you analyze Ethereum wallet transactions. Please provide the Ethereum wallet address you'd like to analyze (it should start with 0x followed by 40 characters)."
        });
    } else {
        // For any other message, ask for the address
        await this.sendChatMessage({
            workspaceId: action.workspace.id,
            agentId: action.me.id,
            message: "I need a valid Ethereum wallet address to analyze. Please provide one in the format 0x followed by 40 hexadecimal characters."
        });
    }
};

agent.doTask = async function(action) {
    const task = action.task;
    
    if (!task) {
        console.log("[doTask] No task found in action:", JSON.stringify(action));
        return;
    }
    
    console.log("[doTask] Processing task ID:", task.id);
    
    try {
        await this.updateTaskStatus({
            workspaceId: action.workspace.id,
            taskId: task.id,
            status: 'in-progress'
        });

        // First check for human assistance response with improved logging
        if (task.humanAssistanceRequests && task.humanAssistanceRequests.length > 0) {
            const lastRequest = task.humanAssistanceRequests[task.humanAssistanceRequests.length - 1];
            console.log("[doTask] Found last human assistance request:", {
                requestId: lastRequest?.id,
                status: lastRequest?.status,
                humanResponse: lastRequest?.humanResponse // This is where the response actually is
            });
            
            // The humanResponse is directly on the request object, not in response
            const responseText = lastRequest?.humanResponse;
            console.log("[doTask] Human assistance response text:", responseText);
            
            if (responseText) {
                const addressMatch = responseText.match(/0x[a-fA-F0-9]{40}/i);
                console.log("[doTask] Checking address from human assistance:", {
                    responseText,
                    matched: !!addressMatch,
                    address: addressMatch ? addressMatch[0] : null
                });
                
                if (addressMatch) {
                    console.log("[doTask] Processing address from human assistance:", addressMatch[0]);
                    const result = await summarizeTokenTransactions(addressMatch[0]);
                    
                    // Create and save markdown analysis
                    const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
                    const markdownContent = `# Ethereum Wallet Analysis

## Wallet Address
\`${addressMatch[0]}\`

## Analysis Date
${new Date().toISOString()}

## Transaction Analysis
${result.chatGPTResponse}

## Transaction Details
[View on Etherscan](${result.overviewURL})

---
Generated by EthWalletAgent for Task #${task.id}`;
            
                    try {
                        const workspaceId = Number(action.workspace.id);
                        const fileName = `analysis/${addressMatch[0].toLowerCase()}.md`;
                        const taskId = Number(task.id);  // Ensure task ID is a number

                        console.log('Attempting file upload:', {
                            workspaceId,
                            path: fileName,
                            hasTaskId: true,
                            taskId
                        });

                        const uploadResponse = await this.uploadFile({
                            workspaceId,
                            path: fileName,
                            file: markdownContent,
                            taskIds: taskId,  // Pass single number
                            skipSummarizer: false
                        });

                        console.log('File upload response:', uploadResponse);

                        await this.addLogToTask({
                            workspaceId,
                            taskId: task.id,
                            severity: 'info',
                            type: 'text',
                            body: `✅ Analysis saved as: ${fileName}`
                        });
                    } catch (error) {
                        console.error('File upload error:', {
                            error: error.message,
                            response: error.response?.data,
                            status: error.response?.status
                        });
                        await this.addLogToTask({
                            workspaceId: action.workspace.id,
                            taskId: task.id,
                            severity: 'error',
                            type: 'text',
                            body: `❌ Failed to save analysis: ${error.message}`
                        });
                    }
                    
                    await this.completeTask({
                        workspaceId: action.workspace.id,
                        taskId: task.id,
                        output: `**Analysis Results:**\n\n${result.chatGPTResponse}\n\n🔗 [View Detailed Transactions](${result.overviewURL})`
                    });
                    return;
                }
            }
        }

        // Then check task input
        let addressMatch;
        if (task.input) {
            addressMatch = task.input.match(/0x[a-fA-F0-9]{40}/i);
            console.log("[doTask] Checking address from task input:", {
                input: task.input,
                matched: !!addressMatch,
                address: addressMatch ? addressMatch[0] : null
            });
        }

        if (addressMatch) {
            console.log("[doTask] Processing address from task input:", addressMatch[0]);
            const result = await summarizeTokenTransactions(addressMatch[0]);
            
            // Create and save markdown analysis
            const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
            const markdownContent = `# Ethereum Wallet Analysis

## Wallet Address
\`${addressMatch[0]}\`

## Analysis Date
${new Date().toISOString()}

## Transaction Analysis
${result.chatGPTResponse}

## Transaction Details
[View on Etherscan](${result.overviewURL})

---
Generated by EthWalletAgent for Task #${task.id}`;
            
            try {
                const workspaceId = Number(action.workspace.id);
                const fileName = `analysis/${addressMatch[0].toLowerCase()}.md`;
                const taskId = Number(task.id);  // Ensure task ID is a number

                console.log('Attempting file upload:', {
                    workspaceId,
                    path: fileName,
                    hasTaskId: true,
                    taskId
                });

                const uploadResponse = await this.uploadFile({
                    workspaceId,
                    path: fileName,
                    file: markdownContent,
                    taskIds: taskId,  // Pass single number
                    skipSummarizer: false
                });

                console.log('File upload response:', uploadResponse);

                await this.addLogToTask({
                    workspaceId,
                    taskId: task.id,
                    severity: 'info',
                    type: 'text',
                    body: `✅ Analysis saved as: ${fileName}`
                });
            } catch (error) {
                console.error('File upload error:', {
                    error: error.message,
                    response: error.response?.data,
                    status: error.response?.status
                });
                await this.addLogToTask({
                    workspaceId: action.workspace.id,
                    taskId: task.id,
                    severity: 'error',
                    type: 'text',
                    body: `❌ Failed to save analysis: ${error.message}`
                });
            }
            
            await this.completeTask({
                workspaceId: action.workspace.id,
                taskId: task.id,
                output: `**Analysis Results:**\n\n${result.chatGPTResponse}\n\n🔗 [View Detailed Transactions](${result.overviewURL})`
            });
        } else {
            console.log("[doTask] No valid address found, requesting human assistance");
            await this.requestHumanAssistance({
                workspaceId: action.workspace.id,
                taskId: task.id,
                type: 'text',
                question: "⚠️ I need a **valid Ethereum wallet address** to proceed.\n\n💡 Please provide one in this format:\n`0x` followed by **40 hexadecimal characters**.",
                agentDump: {
                    conversationHistory: action.messages,
                    expectedFormat: "Ethereum address (0x followed by 40 hexadecimal characters).",
                    processResponse: true 
                }
            });
            console.log("[doTask] Human assistance request sent for task:", {
                taskId: task.id,
                workspaceId: action.workspace.id
            });
        }
    } catch (error) {
        console.error("[doTask] Error processing task:", {
            taskId: task.id,
            error: error.message,
            stack: error.stack
        });
        
        await this.markTaskAsErrored({
            workspaceId: action.workspace.id,
            taskId: task.id,
            error: `Error: ${error.message}`
        });
    }
};

agent.start()
    .then(() => {
        console.log(`Agent running on port ${process.env.PORT || 8080}`);
    })
    .catch(error => {
        console.error("Error starting agent:", error.message);
        process.exit(1); // Exit on startup error
    });