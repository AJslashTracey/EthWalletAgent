import { Agent } from '@openserv-labs/sdk';
import { z } from 'zod';
import dotenv from 'dotenv';
import { summarizeTokenTransactions } from './ETHWalletScanFunction.js';

// Load environment variables
dotenv.config();

const requiredEnvVars = ['OPENSERV_API_KEY_', 'ETHERSCAN_API_KEY', 'OPENAI_API_KEY'];
for (const envVar of requiredEnvVars) {
    if (!process.env[envVar]) {
        throw new Error(`${envVar} environment variable is required`);
    }
}

const agent = new Agent({
    systemPrompt: `You are an Ethereum wallet analysis agent specializing in token transaction analysis.
When asked to analyze a wallet or create a plan, follow these steps:
1. If no ETH address is provided, ask the user for one
2. Once address is provided, validate it's a proper ETH address (0x followed by 40 hex chars)
3. If valid, analyze the transactions
4. If invalid, explain the proper format and ask again

Always maintain context between messages and remember previously provided addresses.`,
    apiKey: process.env.OPENSERV_API_KEY
});

// Shared analysis saving functionality
async function saveAnalysisToMarkdown(address, task, action, result) {
    const markdownContent = `# Ethereum Wallet Analysis
## Wallet Address
\`${address}\`

## Analysis Date
${new Date().toISOString()}

## Transaction Analysis
${result.chatGPTResponse}

## Transaction Details
[View on Etherscan](${result.overviewURL})

---
Generated by EthWalletAgent for Task #${task.id}`;

    const fileName = `analysis/${address.toLowerCase()}.md`;

    try {
        const uploadResponse = await agent.uploadFile({
            workspaceId: action.workspace.id,
            path: fileName,
            file: Buffer.from(markdownContent, 'utf-8'),
            taskIds: [task.id],
            skipSummarizer: false
        });

        await agent.addLogToTask({
            workspaceId: action.workspace.id,
            taskId: task.id,
            severity: 'info',
            type: 'text',
            body: `✅ Analysis saved as: ${fileName}`
        });

        return uploadResponse;
    } catch (error) {
        await agent.addLogToTask({
            workspaceId: action.workspace.id,
            taskId: task.id,
            severity: 'error',
            type: 'text',
            body: `❌ Failed to save analysis: ${error.message}`
        });
        throw error;
    }
}

agent.addCapability({
    name: 'analyzeWallet',
    description: 'Analyze token transactions for an Ethereum wallet address',
    schema: z.object({
        address: z.string().describe('The Ethereum wallet address to analyze')
    }),
    async run({ args, action }, messages) {
        try {
            const isValidAddress = args.address.match(/^0x[a-fA-F0-9]{40}$/);
            if (!isValidAddress) {
                return `Invalid Ethereum address: ${args.address}. Please use the format 0x followed by 40 hexadecimal characters.`;
            }

            const result = await summarizeTokenTransactions(args.address);
            if (!result.chatGPTResponse) {
                return 'No recent token transactions found for this address.';
            }

            if (action?.workspace?.id && action.task?.id) {
                await saveAnalysisToMarkdown(
                    args.address,
                    action.task,
                    action,
                    result
                );
            }

            return `Analysis complete!\n${result.chatGPTResponse}\nView details: ${result.overviewURL}`;
        } catch (error) {
            return error.message.includes('ETHERSCAN_API_KEY') 
                ? 'Internal configuration error' 
                : `Analysis failed: ${error.message}`;
        }
    }
});

agent.respondToChat = async function(action) {
    const lastMessage = action.messages[action.messages.length - 1].message;
    const addressMatch = lastMessage.match(/0x[a-fA-F0-9]{40}/i);

    if (addressMatch) {
        await this.handleToolRoute({
            params: { toolName: 'analyzeWallet' },
            body: { args: { address: addressMatch[0] }, action, messages: action.messages }
        });
    } else {
        const responseMessage = lastMessage.toLowerCase().includes('analyze')
            ? "Please provide an Ethereum wallet address (0x followed by 40 characters)."
            : "I need a valid Ethereum wallet address to analyze.";
        
        await this.sendChatMessage({
            workspaceId: action.workspace.id,
            agentId: action.me.id,
            message: responseMessage
        });
    }
};

agent.doTask = async function(action) {
    const { task } = action;
    if (!task) return;

    try {
        await this.updateTaskStatus({
            workspaceId: action.workspace.id,
            taskId: task.id,
            status: 'in-progress'
        });

        // Try to find address in human response or task input
        const responseText = task.humanAssistanceRequests?.at(-1)?.humanResponse;
        const addressMatch = (responseText || task.input)?.match(/0x[a-fA-F0-9]{40}/i);

        if (addressMatch) {
            const result = await summarizeTokenTransactions(addressMatch[0]);
            await saveAnalysisToMarkdown(addressMatch[0], task, action, result);
            
            await this.completeTask({
                workspaceId: action.workspace.id,
                taskId: task.id,
                output: `**Results:**\n${result.chatGPTResponse}\n[View Transactions](${result.overviewURL})`
            });
        } else {
            await this.requestHumanAssistance({
                workspaceId: action.workspace.id,
                taskId: task.id,
                type: 'text',
                question: "Please provide a valid Ethereum wallet address (0x followed by 40 hex characters).",
                agentDump: { conversationHistory: action.messages }
            });
        }
    } catch (error) {
        await this.markTaskAsErrored({
            workspaceId: action.workspace.id,
            taskId: task.id,
            error: error.message
        });
    }
};

agent.start()
    .then(() => console.log(`Agent running on port ${process.env.PORT || 8080}`))
    .catch(error => {
        console.error("Agent startup failed:", error);
        process.exit(1);
    });